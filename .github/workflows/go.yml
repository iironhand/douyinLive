name: Multi-Arch Release Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*']
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  APP_NAME: 'douyinLive'
  BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.setup.outputs.timestamp }}
    steps:
      - name: Generate Metadata
        id: setup
        run: |
          TIMESTAMP=$(date -u +'%Y%m%dT%H%M%SZ')
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

  build-windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go build -o ${{ env.APP_NAME }}.exe
      - uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: ${{ env.APP_NAME }}.exe

  build-linux:
    needs: setup
    runs-on: ubuntu-latest
    env:
      GOARCH: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ env.GOARCH }} \
          go build -o ${{ env.APP_NAME }}-linux-${{ env.GOARCH }}
      - uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: ${{ env.APP_NAME }}-linux-${{ env.GOARCH }}

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: |
            windows-exe
            linux-bin
    # 新增路径调试步骤
      - name: Debug Path Structure
        run: |
         echo "当前工作目录: $PWD"
         echo "目录结构:"
         ls -alh
          echo "Artifacts 目录内容:"
         ls -R artifacts || echo "尚未创建 artifacts 目录"
      - name: Validate Files
        run: |
          echo "文件结构验证:"
          ls -R artifacts
          # 关键校验点
          [ -f windows-exe/${{ env.APP_NAME }}.exe ] || exit 1
          [ -f linux-bin/${{ env.APP_NAME }}-linux-arm64 ] || exit 1

      - name: Generate Checksums
        run: |
          mkdir -p checksums
          cd windows-exe && sha256sum * > ../../checksums/windows.sha256
          cd ../linux-bin && sha256sum * > ../../checksums/linux.sha256

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ contains(github.ref, 'refs/tags/') && github.ref_name || format('nightly-{0}', needs.setup.outputs.timestamp) }}
          name: ${{ contains(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Nightly Build {0}', needs.setup.outputs.timestamp) }}
          body: |
            ## 多架构构建结果
            **包含以下独立文件：**
            - Windows x64 可执行文件 (.exe)
            - Linux ARM64 二进制文件
            **构建信息：**
            - 构建ID: ${{ env.BUILD_ID }}
            - 构建时间: ${{ needs.setup.outputs.timestamp }}
          files: |
            windows-exe/${{ env.APP_NAME }}.exe
            linux-bin/${{ env.APP_NAME }}-linux-arm64
            checksums/windows.sha256
            checksums/linux.sha256
          draft: false
          prerelease: ${{ !contains(github.ref, 'refs/tags/') }}
