name: Go Build & Release Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*']  # 新增标签触发
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  APP_NAME: 'douyinLive'
  BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.setup.outputs.timestamp }}
    steps:
      - name: Generate Metadata
        id: setup
        run: |
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

  build-windows-amd64:
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go build -o ${{ env.APP_NAME }}.exe
      - uses: actions/upload-artifact@v4
        with:
          name: windows-bin
          path: ${{ env.APP_NAME }}.exe

  build-linux-arm64:
    needs: setup
    runs-on: ubuntu-latest
    env:
      GOARCH: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ env.GOARCH }} \
          go build -trimpath -ldflags "-s -w" \
          -o ${{ env.APP_NAME }}-linux-${{ env.GOARCH }}
      - uses: actions/upload-artifact@v4
        with:
          name: linux-bin
          path: ${{ env.APP_NAME }}-linux-${{ env.GOARCH }}
          retention-days: 3

  deploy:
    needs: [build-windows-amd64, build-linux-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      RELEASE_DIR: "release-${{ needs.setup.outputs.timestamp }}"
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Bundle
        run: |
          mkdir -p "${RELEASE_DIR}/bin"
          find artifacts -type f -exec cp {} "${RELEASE_DIR}/bin/" \;
          (cd "${RELEASE_DIR}/bin" && sha256sum *) > "${RELEASE_DIR}/checksums.txt"
          echo "Build ID: ${{ github.run_id }}" > "${RELEASE_DIR}/BUILD_INFO"
          date -u +'%Y-%m-%dT%H:%M:%SZ' >> "${RELEASE_DIR}/BUILD_INFO"

      - name: Create Compressed Package
        run: tar czvf "${RELEASE_DIR}.tgz" -C "${RELEASE_DIR}" .

      - name: Dynamic Release
        uses: softprops/action-gh-release@v1
        with:
          # 根据触发类型自动生成版本信息
          tag_name: ${{ contains(github.ref, 'refs/tags/') && github.ref_name || format('nightly-{0}', env.RELEASE_DIR) }}
          name: ${{ contains(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Nightly Build {0}', env.RELEASE_DIR) }}
          body: |
            ${{ contains(github.ref, 'refs/tags/') && '正式版本发布' || '每日构建版本' }}
            构建时间: ${{ env.RELEASE_DIR }}
            包含架构:
            - Windows amd64
            - Linux ARM64
          files: |
            ${RELEASE_DIR}.tgz
            ${RELEASE_DIR}/checksums.txt
          draft: false
          prerelease: ${{ !contains(github.ref, 'refs/tags/') }}
