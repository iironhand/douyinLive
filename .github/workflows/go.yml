name: Unified Multi-Arch Release Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      commitMessage:
        description: '提交信息（可选）'
        required: false
        default: '无提交信息'


env:
  GO_VERSION: '1.23'
  APP_NAME: 'douyinLive'
  BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.setup.outputs.timestamp }}
    steps:
      - name: Generate Metadata
        id: setup
        run: |
          TIMESTAMP=$(date -u +'%Y%m%dT%H%M%SZ')
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: windows
            ext: .exe
            goos: windows
            goarch: amd64
          - target: linux
            ext: ""
            goos: linux
            goarch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Clean and update dependencies
        run: |
          go mod tidy
      - name: List all Go packages
        run: go list ./...

      - name: Build Binary
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -o artifacts/${{ matrix.target }}/${{ env.APP_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          
          # 实时验证输出文件
          echo "编译已完成，文件列表："
          ls -lh artifacts/${{ matrix.target }}/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binaries
          path: artifacts/${{ matrix.target }}/
          retention-days: 1

  release:
    needs: [setup, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Validate Directory Structure
        run: |
          echo "=== 目录结构验证 ==="
          tree artifacts || find artifacts -type f
          
          # 严格文件存在性检查
          [ -f artifacts/linux-binaries/$APP_NAME-linux-arm64 ] || (echo "❌ Linux文件缺失"; exit 1)
          [ -f artifacts/windows-binaries/$APP_NAME-windows-amd64.exe ] || (echo "❌ Windows文件缺失"; exit 1)
          

      - name: Generate Checksums
        run: |
          mkdir -p checksums
          find artifacts -type f -exec sha256sum {} \; > checksums/sha256sums.txt
          
          echo "=== 校验和文件内容 ==="
          cat checksums/sha256sums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ contains(github.ref, 'refs/tags/') && github.ref_name || format('nightly-{0}', needs.setup.outputs.timestamp) }}
          name: ${{ contains(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Nightly Build {0}', needs.setup.outputs.timestamp) }}
          body: |
            ## 多架构统一构建
            **包含以下平台文件：**
            - Windows x64 可执行文件 (EXE)
            - Linux ARM64 二进制文件 (BIN)
            
            **构建元信息：**
            - 构建ID: ${{ env.BUILD_ID }}
            - 编译时间: ${{ needs.setup.outputs.timestamp }}
            - 编译系统: Ubuntu (Cross-Compile)
            
            **提交信息：**
                  ${{ github.event.inputs.commitMessage || github.event.head_commit.message }}
          files: |
            artifacts/**/*
            checksums/sha256sums.txt
          draft: false
          prerelease: ${{ !contains(github.ref, 'refs/tags/') }}
